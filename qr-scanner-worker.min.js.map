{"version":3,"file":"qr-scanner-worker.min.js","sources":["src/worker.ts"],"sourcesContent":["import jsQR from 'jsqr-es6';\nimport { initDecoder, getDecoderInitialized } from 'jsqr-es6/dist/decoder/reedsolomon'\n\nif (!getDecoderInitialized()) {\n  await initDecoder();\n}\n\ntype GrayscaleWeights = {\n    red: number,\n    green: number,\n    blue: number,\n    useIntegerApproximation: boolean,\n};\n\nlet inversionAttempts: 'dontInvert' | 'onlyInvert' | 'attemptBoth' = 'dontInvert';\nlet grayscaleWeights: GrayscaleWeights = {\n    // weights for quick luma integer approximation (https://en.wikipedia.org/wiki/YUV#Full_swing_for_BT.601)\n    red: 77,\n    green: 150,\n    blue: 29,\n    useIntegerApproximation: true,\n};\n\nself.onmessage = event => {\n    const id = event['data']['id'];\n    const type = event['data']['type'];\n    const data = event['data']['data'];\n\n    switch (type) {\n        case 'decode':\n            decode(data, id);\n            break;\n        case 'grayscaleWeights':\n            setGrayscaleWeights(data);\n            break;\n        case 'inversionMode':\n            setInversionMode(data);\n            break;\n        case 'close':\n            // close after earlier messages in the event loop finished processing\n            self.close();\n            break;\n    }\n};\n\nfunction decode(data: { data: Uint8ClampedArray, width: number, height: number }, requestId: number): void {\n    const rgbaData = data['data'];\n    const width = data['width'];\n    const height = data['height'];\n    const result = jsQR(rgbaData, width, height, {\n        inversionAttempts: inversionAttempts,\n        greyScaleWeights: grayscaleWeights,\n    });\n    if (!result) {\n        (self as unknown as Worker).postMessage({\n            id: requestId,\n            type: 'qrResult',\n            data: null,\n        });\n        return;\n    }\n\n    (self as unknown as Worker).postMessage({\n        id: requestId,\n        type: 'qrResult',\n        data: result.data,\n        // equivalent to cornerPoints of native BarcodeDetector\n        cornerPoints: [\n            result.location.topLeftCorner,\n            result.location.topRightCorner,\n            result.location.bottomRightCorner,\n            result.location.bottomLeftCorner,\n        ],\n    });\n}\n\nfunction setGrayscaleWeights(data: GrayscaleWeights) {\n    // update grayscaleWeights in a closure compiler compatible fashion\n    grayscaleWeights.red = data['red'];\n    grayscaleWeights.green = data['green'];\n    grayscaleWeights.blue = data['blue'];\n    grayscaleWeights.useIntegerApproximation = data['useIntegerApproximation'];\n}\n\nfunction setInversionMode(inversionMode: 'original' | 'invert' | 'both') {\n    switch (inversionMode) {\n        case 'original':\n            inversionAttempts = 'dontInvert';\n            break;\n        case 'invert':\n            inversionAttempts = 'onlyInvert';\n            break;\n        case 'both':\n            inversionAttempts = 'attemptBoth';\n            break;\n        default:\n            throw new Error('Invalid inversion mode');\n    }\n}\n"],"names":[],"mappings":"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"}