{"version":3,"file":"qr-scanner-worker.min.js","sources":["src/worker.ts"],"sourcesContent":["import jsQR from \"jsqr-es6\";\nimport {\n  initDecoder,\n  getDecoderInitialized,\n} from \"jsqr-es6/dist/decoder/reedsolomon/index.js\";\nimport { WorkerResult } from \"./WorkerResult\";\n\ntype GreyScaleWeights = {\n  red: number;\n  green: number;\n  blue: number;\n  useIntegerApproximation: boolean;\n};\n\nlet inversionAttempts: \"dontInvert\" | \"onlyInvert\" | \"attemptBoth\" =\n  \"attemptBoth\";\nlet greyScaleWeights: GreyScaleWeights = {\n  // weights for quick luma integer approximation (https://en.wikipedia.org/wiki/YUV#Full_swing_for_BT.601)\n  red: 77,\n  green: 150,\n  blue: 29,\n  useIntegerApproximation: true,\n};\n\nself.onmessage = async (event) => {\n  const id = event[\"data\"][\"id\"];\n  const type = event[\"data\"][\"type\"];\n  const data = event[\"data\"][\"data\"];\n\n  switch (type) {\n    case \"decode\":\n      if (!getDecoderInitialized()) {\n        await initDecoder();\n      }\n      decode(data, id);\n      break;\n    case \"grayscaleWeights\":\n      setGrayscaleWeights(data);\n      break;\n    case \"inversionMode\":\n      setInversionMode(data);\n      break;\n    case \"close\":\n      // close after earlier messages in the event loop finished processing\n      self.close();\n      break;\n  }\n};\n\nfunction decode(\n  data: { data: Uint8ClampedArray; width: number; height: number },\n  requestId: number,\n): void {\n  const rgbaData = data[\"data\"];\n  const width = data[\"width\"];\n  const height = data[\"height\"];\n  const result = jsQR(rgbaData, width, height, {\n    inversionAttempts: inversionAttempts,\n    greyScaleWeights: greyScaleWeights,\n  });\n  if (!result) {\n    (self as unknown as Worker).postMessage({\n      id: requestId,\n      type: \"qrResult\",\n      data: null,\n    } as WorkerResult);\n    return;\n  }\n\n  (self as unknown as Worker).postMessage(\n    {\n      id: requestId,\n      type: \"qrResult\",\n      data: result.data,\n      // equivalent to cornerPoints of native BarcodeDetector\n      cornerPoints: [\n        result.location.topLeftCorner,\n        result.location.topRightCorner,\n        result.location.bottomRightCorner,\n        result.location.bottomLeftCorner,\n      ],\n      version: result.version,\n      matrixData: result.matrix.data,\n      matrixWidth: result.matrix.width,\n      matrixDataCorrected: result.matrixCorrected.data,\n      ecLevel: result.ecLevel,\n      dataMask: result.dataMask,\n      chunks: result.chunks,\n      streamMappings: result.streamMappings,\n    } as WorkerResult,\n    [result.matrix.data.buffer, result.matrixCorrected.data.buffer],\n  );\n}\n\nfunction setGrayscaleWeights(data: GreyScaleWeights) {\n  // update grayscaleWeights in a closure compiler compatible fashion\n  greyScaleWeights.red = data[\"red\"];\n  greyScaleWeights.green = data[\"green\"];\n  greyScaleWeights.blue = data[\"blue\"];\n  greyScaleWeights.useIntegerApproximation = data[\"useIntegerApproximation\"];\n}\n\nfunction setInversionMode(inversionMode: \"original\" | \"invert\" | \"both\") {\n  switch (inversionMode) {\n    case \"original\":\n      inversionAttempts = \"dontInvert\";\n      break;\n    case \"invert\":\n      inversionAttempts = \"onlyInvert\";\n      break;\n    case \"both\":\n      inversionAttempts = \"attemptBoth\";\n      break;\n    default:\n      throw new Error(\"Invalid inversion mode\");\n  }\n}\n"],"names":[],"mappings":"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"}